{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","mapentry","toFixed","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderOutput","input_mode","setState","sendForSentimentAnalysis","textInput","document","getElementById","value","url","fetch","then","response","contentType","headers","get","indexOf","json","data","label","output","badge","text","class","role","sendForEmotionAnalysis","componentDidMount","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e4281648.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./bootstrap.min.css\";\r\nimport './EmotionTable.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"emotion-table\">\r\n        <br />\r\n        <table className=\"table table-bordered table-sm\">\r\n          <tbody>\r\n            {Object.entries(this.props.emotions).map(function (mapentry) {\r\n              return (\r\n                <tr>\r\n                  <td>{mapentry[0]}</td><td>{`${(mapentry[1] * 100).toFixed(2)}%`}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default EmotionTable;\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\r\n    mode: \"text\",\r\n    sentimentOutput: [],\r\n    sentiment: true\r\n  }\r\n\r\n  renderOutput = (input_mode) => {\r\n    let rows = 1\r\n    let mode = \"url\"\r\n    if (input_mode === \"text\") {\r\n      mode = \"text\"\r\n      rows = 4\r\n    }\r\n    this.setState({\r\n      innercomp: <textarea rows={rows} cols=\"50\" id=\"textinput\" />,\r\n      mode: mode,\r\n      sentimentOutput: [],\r\n      sentiment: true\r\n    });\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({ sentiment: true });\r\n    let textInput = document.getElementById(\"textinput\").value;\r\n    let url = \".\";\r\n    let mode = this.state.mode\r\n    url = url + \"/\" + mode + \"/sentiment?\" + mode + \"=\" + textInput;\r\n\r\n    fetch(url).then((response) => {\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n        response.json().then((data) => {\r\n          this.setState({ sentimentOutput: data.label });\r\n          let output = data.label;\r\n          let badge = \"\"\r\n          switch (output) {\r\n            case \"positive\":\r\n              badge = \"badge-success\";\r\n              break;\r\n            case \"negative\":\r\n              badge = \"badge-danger\";\r\n              break;\r\n            default:\r\n              badge = \"badge-warning\";\r\n          }\r\n          output = <span className={`badge ${badge}`}>{output}</span>;\r\n          this.setState({ sentimentOutput: output });\r\n        })\r\n      } else {\r\n        response.text().then(text => {\r\n          let output = <div class=\"alert alert-danger\" role=\"alert\">{text}</div>\r\n          this.setState({ sentimentOutput: output });\r\n        })\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n    this.setState({ sentiment: false });\r\n    let url = \".\";\r\n    let mode = this.state.mode\r\n    url = url + \"/\" + mode + \"/emotion?\" + mode + \"=\" + document.getElementById(\"textinput\").value;\r\n\r\n    fetch(url).then((response) => {\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n        response.json().then((data) => {\r\n          this.setState({ sentimentOutput: <EmotionTable emotions={data} /> });\r\n        })\r\n      } else {\r\n        response.text().then(text => {\r\n          let output = <div class=\"alert alert-danger\" role=\"alert\">{text}</div>\r\n          this.setState({ sentimentOutput: output });\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    document.title = \"Sentiment Analyzer\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button className=\"btn btn-info\" onClick={() => { this.renderOutput('text') }}>Text</button>&nbsp;\r\n        <button className=\"btn btn-dark\" onClick={() => { this.renderOutput('url') }}>URL</button>\r\n        <br /><br />\r\n        {this.state.innercomp}\r\n        <br />\r\n        <button className=\"btn btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>&nbsp;\r\n        <button className=\"btn btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br />\r\n        {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}